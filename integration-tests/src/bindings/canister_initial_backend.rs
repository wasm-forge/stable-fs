// This is an experimental feature used to generate Rust bindings from Candid.
// THIS IS A GENERATED FILE. DO NOT EDIT THIS FILE TO AVOID DATA LOSS.
#![allow(dead_code, unused_imports, non_snake_case)]
use candid::{self, CandidType, Decode, Deserialize, Encode, Principal};

pub struct CanisterInitialBackendCanister {
    pub canister_id: Principal,
    pub caller: super::Caller,
}

impl CanisterInitialBackendCanister {
    pub fn append_buffer(&self, arg0: String, arg1: u64) -> super::CallBuilder<u64> {
        let args = Encode!(&arg0, &arg1);
        self.caller.call(
            self.canister_id,
            super::CallMode::Update,
            "append_buffer",
            args,
        )
    }
    pub fn append_text(&self, arg0: String, arg1: String, arg2: u64) -> super::CallBuilder<u64> {
        let args = Encode!(&arg0, &arg1, &arg2);
        self.caller.call(
            self.canister_id,
            super::CallMode::Update,
            "append_text",
            args,
        )
    }
    pub fn cat_file(&self, arg0: String) -> super::CallBuilder<String> {
        let args = Encode!(&arg0);
        self.caller
            .call(self.canister_id, super::CallMode::Query, "cat_file", args)
    }
    pub fn check_metadata_binary(&self) -> super::CallBuilder<String> {
        let args = Encode!();
        self.caller.call(
            self.canister_id,
            super::CallMode::Query,
            "check_metadata_binary",
            args,
        )
    }
    pub fn check_metadata_deserialization_into_repr_c(&self) -> super::CallBuilder<u64> {
        let args = Encode!();
        self.caller.call(
            self.canister_id,
            super::CallMode::Query,
            "
        check_metadata_deserialization_into_repr_c
      ",
            args,
        )
    }
    pub fn check_metadata_format(&self) -> super::CallBuilder<()> {
        let args = Encode!();
        self.caller.call(
            self.canister_id,
            super::CallMode::Query,
            "check_metadata_format",
            args,
        )
    }
    pub fn chunk_size(&self) -> super::CallBuilder<u64> {
        let args = Encode!();
        self.caller.call(
            self.canister_id,
            super::CallMode::Update,
            "chunk_size",
            args,
        )
    }
    pub fn clear_buffer(&self) -> super::CallBuilder<()> {
        let args = Encode!();
        self.caller.call(
            self.canister_id,
            super::CallMode::Update,
            "clear_buffer",
            args,
        )
    }
    pub fn create_depth_folders(&self, arg0: String, arg1: u64) -> super::CallBuilder<String> {
        let args = Encode!(&arg0, &arg1);
        self.caller.call(
            self.canister_id,
            super::CallMode::Update,
            "create_depth_folders",
            args,
        )
    }
    pub fn create_files(&self, arg0: String, arg1: u64) -> super::CallBuilder<u64> {
        let args = Encode!(&arg0, &arg1);
        self.caller.call(
            self.canister_id,
            super::CallMode::Update,
            "create_files",
            args,
        )
    }
    pub fn delete_file(&self, arg0: String) -> super::CallBuilder<()> {
        let args = Encode!(&arg0);
        self.caller.call(
            self.canister_id,
            super::CallMode::Query,
            "delete_file",
            args,
        )
    }
    pub fn delete_folder(&self, arg0: String) -> super::CallBuilder<()> {
        let args = Encode!(&arg0);
        self.caller.call(
            self.canister_id,
            super::CallMode::Query,
            "delete_folder",
            args,
        )
    }
    pub fn file_size(&self, arg0: String) -> super::CallBuilder<u64> {
        let args = Encode!(&arg0);
        self.caller
            .call(self.canister_id, super::CallMode::Query, "file_size", args)
    }
    pub fn greet(&self, arg0: String) -> super::CallBuilder<String> {
        let args = Encode!(&arg0);
        self.caller
            .call(self.canister_id, super::CallMode::Query, "greet", args)
    }
    pub fn greet_times(&self, arg0: String, arg1: u64) -> super::CallBuilder<Vec<String>> {
        let args = Encode!(&arg0, &arg1);
        self.caller.call(
            self.canister_id,
            super::CallMode::Query,
            "greet_times",
            args,
        )
    }
    pub fn list_files(&self, arg0: String) -> super::CallBuilder<Vec<String>> {
        let args = Encode!(&arg0);
        self.caller
            .call(self.canister_id, super::CallMode::Query, "list_files", args)
    }
    pub fn load_buffer(&self, arg0: String) -> super::CallBuilder<(u64, u64)> {
        let args = Encode!(&arg0);
        self.caller.call(
            self.canister_id,
            super::CallMode::Update,
            "load_buffer",
            args,
        )
    }
    pub fn read_buffer(&self, arg0: u64, arg1: u64) -> super::CallBuilder<String> {
        let args = Encode!(&arg0, &arg1);
        self.caller.call(
            self.canister_id,
            super::CallMode::Update,
            "read_buffer",
            args,
        )
    }
    pub fn read_bytes(&self, arg0: String, arg1: i64, arg2: u64) -> super::CallBuilder<(u64, u64)> {
        let args = Encode!(&arg0, &arg1, &arg2);
        self.caller.call(
            self.canister_id,
            super::CallMode::Update,
            "read_bytes",
            args,
        )
    }
    pub fn read_text(&self, arg0: String, arg1: i64, arg2: u64) -> super::CallBuilder<String> {
        let args = Encode!(&arg0, &arg1, &arg2);
        self.caller
            .call(self.canister_id, super::CallMode::Query, "read_text", args)
    }
    pub fn store_buffer(&self, arg0: String) -> super::CallBuilder<(u64, u64)> {
        let args = Encode!(&arg0);
        self.caller.call(
            self.canister_id,
            super::CallMode::Update,
            "store_buffer",
            args,
        )
    }
    pub fn write_kib_text(&self, arg0: String, arg1: u64) -> super::CallBuilder<u64> {
        let args = Encode!(&arg0, &arg1);
        self.caller.call(
            self.canister_id,
            super::CallMode::Update,
            "write_kib_text",
            args,
        )
    }
    pub fn write_mib_text(&self, arg0: String, arg1: u64) -> super::CallBuilder<u64> {
        let args = Encode!(&arg0, &arg1);
        self.caller.call(
            self.canister_id,
            super::CallMode::Update,
            "write_mib_text",
            args,
        )
    }
}

pub fn new(caller: &super::Caller, canister_id: Principal) -> CanisterInitialBackendCanister {
    CanisterInitialBackendCanister {
        canister_id,
        caller: caller.clone(),
    }
}

pub fn deploy(deployer: &super::Deployer) -> super::DeployBuilder<CanisterInitialBackendCanister> {
    let args = Encode!();
    let result = deployer.deploy(args, new);
    let result = if let Some(id) = canister_id() {
        result.with_canister_id(id)
    } else {
        result
    };
    if let Some(wasm) = wasm() {
        result.with_wasm(wasm)
    } else {
        result
    }
}
pub fn canister_id() -> Option<Principal> {
    None
}

pub fn wasm() -> Option<Vec<u8>> {
    let mut path = std::path::PathBuf::new();
    path.push("../target/wasm32-unknown-unknown/release/canister_initial_backend.wasm");
    let wasm =
        std::fs::read(path.as_path()).unwrap_or_else(|_| panic!("wasm binary not found: {path:?}"));
    Some(wasm)
}
